Random notes ###################################################################



RAPL registers: ----------------------------------------------------------------
/*
 * Platform specific RAPL Domains.
 * Note that PP1 RAPL Domain is supported on 062A only
 * And DRAM RAPL Domain is supported on 062D only
 */
/* Package RAPL Domain */
#define MSR_PKG_RAPL_POWER_LIMIT	0x610
#define MSR_PKG_ENERGY_STATUS		0x611
#define MSR_PKG_PERF_STATUS		0x613
#define MSR_PKG_POWER_INFO		0x614

/* PP0 RAPL Domain */
#define MSR_PP0_POWER_LIMIT		0x638        // unused
#define MSR_PP0_ENERGY_STATUS		0x639
#define MSR_PP0_POLICY			0x63A
#define MSR_PP0_PERF_STATUS		0x63B

/* PP1 RAPL Domain, may reflect to uncore devices */
#define MSR_PP1_POWER_LIMIT		0x640        // unused
#define MSR_PP1_ENERGY_STATUS		0x641
#define MSR_PP1_POLICY			0x642

/* DRAM RAPL Domain */
#define MSR_DRAM_POWER_LIMIT		0x618      // unused
#define MSR_DRAM_ENERGY_STATUS		0x619
#define MSR_DRAM_PERF_STATUS		0x61B      // unused
#define MSR_DRAM_POWER_INFO		0x61C        // unused

/* RAPL UNIT BITMASK */
#define POWER_UNIT_OFFSET	0         // unused
#define POWER_UNIT_MASK		0x0F      // unused

#define ENERGY_UNIT_OFFSET	0x08    // unused
#define ENERGY_UNIT_MASK	0x1F00    // unused

#define TIME_UNIT_OFFSET	0x10      // unused
#define TIME_UNIT_MASK		0xF000    // unused



RAPL reading: ------------------------------------------------------------------
/*******************************/
/* MSR code                    */
/*******************************/
static int rapl_msr(int core) {

  int fd;
  long long result;
  double power_units,energy_units,time_units;
  double package_before,package_after;
  double pp0_before,pp0_after;
  double pp1_before=0.0,pp1_after;
  double dram_before=0.0,dram_after;
  double thermal_spec_power,minimum_power,maximum_power,time_window;
  int cpu_model;

  cpu_model=detect_cpu();
  if (cpu_model<0) {
	printf("Unsupported CPU type\n");
	return -1;
  }

  printf("Checking core #%d\n",core);

  fd=open_msr(core);

  /* Calculate the units used */
  result=read_msr(fd,MSR_RAPL_POWER_UNIT);

  power_units=pow(0.5,(double)(result&0xf));
  energy_units=pow(0.5,(double)((result>>8)&0x1f));
  time_units=pow(0.5,(double)((result>>16)&0xf));

  printf("Power units = %.3fW\n",power_units);
  printf("Energy units = %.8fJ\n",energy_units);
  printf("Time units = %.8fs\n",time_units);
  printf("\n");

  /* Show package power info */
  result=read_msr(fd,MSR_PKG_POWER_INFO);
  thermal_spec_power=power_units*(double)(result&0x7fff);
  printf("Package thermal spec: %.3fW\n",thermal_spec_power);
  minimum_power=power_units*(double)((result>>16)&0x7fff);
  printf("Package minimum power: %.3fW\n",minimum_power);
  maximum_power=power_units*(double)((result>>32)&0x7fff);
  printf("Package maximum power: %.3fW\n",maximum_power);
  time_window=time_units*(double)((result>>48)&0x7fff);
  printf("Package maximum time window: %.6fs\n",time_window);

  /* Show package power limit */
  result=read_msr(fd,MSR_PKG_RAPL_POWER_LIMIT);
  printf("Package power limits are %s\n", (result >> 63) ? "locked" : "unlocked");
  double pkg_power_limit_1 = power_units*(double)((result>>0)&0x7FFF);
  double pkg_time_window_1 = time_units*(double)((result>>17)&0x007F);
  printf("Package power limit #1: %.3fW for %.6fs (%s, %s)\n", pkg_power_limit_1, pkg_time_window_1,
           (result & (1LL<<15)) ? "enabled" : "disabled",
           (result & (1LL<<16)) ? "clamped" : "not_clamped");
  double pkg_power_limit_2 = power_units*(double)((result>>32)&0x7FFF);
  double pkg_time_window_2 = time_units*(double)((result>>49)&0x007F);
  printf("Package power limit #2: %.3fW for %.6fs (%s, %s)\n", pkg_power_limit_2, pkg_time_window_2,
          (result & (1LL<<47)) ? "enabled" : "disabled",
          (result & (1LL<<48)) ? "clamped" : "not_clamped");

  printf("\n");

  /* result=read_msr(fd,MSR_RAPL_POWER_UNIT); */

  result=read_msr(fd,MSR_PKG_ENERGY_STATUS);
  package_before=(double)result*energy_units;
  printf("Package energy before: %.6fJ\n",package_before);

  /* only available on *Bridge-EP */
  if ((cpu_model==CPU_SANDYBRIDGE_EP) || (cpu_model==CPU_IVYBRIDGE_EP))
  {
    result=read_msr(fd,MSR_PKG_PERF_STATUS);
    double acc_pkg_throttled_time=(double)result*time_units;
    printf("Accumulated Package Throttled Time : %.6fs\n",acc_pkg_throttled_time);
  }

  result=read_msr(fd,MSR_PP0_ENERGY_STATUS);
  pp0_before=(double)result*energy_units;
  printf("PowerPlane0 (core) for core %d energy before: %.6fJ\n",core,pp0_before);

  /* NOT available on Haswell-EP */
  if (cpu_model!=CPU_HASWELL_EP)
  {
    result=read_msr(fd,MSR_PP0_POLICY);
    int pp0_policy=(int)result&0x001f;
    printf("PowerPlane0 (core) for core %d policy: %d\n",core,pp0_policy);
  }

  /* only available on *Bridge-EP */
  if ((cpu_model==CPU_SANDYBRIDGE_EP) || (cpu_model==CPU_IVYBRIDGE_EP))
  {
    result=read_msr(fd,MSR_PP0_PERF_STATUS);
    double acc_pp0_throttled_time=(double)result*time_units;
    printf("PowerPlane0 (core) Accumulated Throttled Time : %.6fs\n",acc_pp0_throttled_time);
  }

  /* not available on *Bridge-EP */
  if ((cpu_model==CPU_SANDYBRIDGE) || (cpu_model==CPU_IVYBRIDGE) ||
	(cpu_model==CPU_HASWELL)) {
     result=read_msr(fd,MSR_PP1_ENERGY_STATUS);
     pp1_before=(double)result*energy_units;
     printf("PowerPlane1 (on-core GPU if avail) before: %.6fJ\n",pp1_before);
     result=read_msr(fd,MSR_PP1_POLICY);
     int pp1_policy=(int)result&0x001f;
     printf("PowerPlane1 (on-core GPU if avail) %d policy: %d\n",core,pp1_policy);
  }

	/* Despite documentation saying otherwise, it looks like */
	/* You can get DRAM readings on regular Haswell          */
  if ((cpu_model==CPU_SANDYBRIDGE_EP) || (cpu_model==CPU_IVYBRIDGE_EP) ||
	(cpu_model==CPU_HASWELL)) {
     result=read_msr(fd,MSR_DRAM_ENERGY_STATUS);
     dram_before=(double)result*energy_units;
     printf("DRAM energy before: %.6fJ\n",dram_before);
  }

  printf("\nSleeping 1 second\n\n");
  sleep(1);

  result=read_msr(fd,MSR_PKG_ENERGY_STATUS);
  package_after=(double)result*energy_units;
  printf("Package energy after: %.6f  (%.6fJ consumed)\n",
	 package_after,package_after-package_before);

  result=read_msr(fd,MSR_PP0_ENERGY_STATUS);
  pp0_after=(double)result*energy_units;
  printf("PowerPlane0 (core) for core %d energy after: %.6f  (%.6fJ consumed)\n",
	 core,pp0_after,pp0_after-pp0_before);

  /* not available on SandyBridge-EP */
  if ((cpu_model==CPU_SANDYBRIDGE) || (cpu_model==CPU_IVYBRIDGE) ||
	(cpu_model==CPU_HASWELL)) {
     result=read_msr(fd,MSR_PP1_ENERGY_STATUS);
     pp1_after=(double)result*energy_units;
     printf("PowerPlane1 (on-core GPU if avail) after: %.6f  (%.6fJ consumed)\n",
	 pp1_after,pp1_after-pp1_before);
  }

  if ((cpu_model==CPU_SANDYBRIDGE_EP) || (cpu_model==CPU_IVYBRIDGE_EP) ||
	(cpu_model==CPU_HASWELL)) {
     result=read_msr(fd,MSR_DRAM_ENERGY_STATUS);
     dram_after=(double)result*energy_units;
     printf("DRAM energy after: %.6f  (%.6fJ consumed)\n",
	 dram_after,dram_after-dram_before);
  }

  printf("\n");
  printf("Note: the energy measurements can overflow in 60s or so\n");
  printf("      so try to sample the counters more often than that.\n\n");
  close(fd);

  return 0;
}

static long long read_msr(int fd, int which) {

  uint64_t data;

  if ( pread(fd, &data, sizeof data, which) != sizeof data ) {
    perror("rdmsr:pread");
    exit(127);
  }

  return (long long)data;
}



Read and write MSR: ------------------------------------------------------------
	static long long read_msr(unsigned int ecx) {
	    unsigned int edx = 0, eax = 0;
	    unsigned long long result = 0;
	    __asm__ __volatile__("rdmsr" : "=a"(eax), "=d"(edx) : "c"(ecx));
	    result = eax | (unsigned long long)edx << 0x20;
	    dprintk(KERN_ALERT "Module msrdrv: Read 0x%016llx (0x%08x:0x%08x) from MSR 0x%08x\n", result, edx, eax, ecx)
	    return result;
	}

	static void write_msr(int ecx, unsigned int eax, unsigned int edx) {
	    dprintk(KERN_ALERT "Module msrdrv: Writing 0x%08x:0x%08x to MSR 0x%04x\n", edx, eax, ecx)
	    __asm__ __volatile__("wrmsr" : : "c"(ecx), "a"(eax), "d"(edx));
	}



Data structure with the list of MSR to be read: --------------------------------
	enum MsrOperation {
	    MSR_NOP   = 0,
	    MSR_READ  = 1,
	    MSR_WRITE = 2,
	    MSR_STOP  = 3,
	    MSR_RDTSC = 4
	};

	struct MsrInOut {
	    unsigned int op;              // MsrOperation
	    unsigned int ecx;             // msr identifier
	    union {
	        struct {
	            unsigned int eax;     // low double word
	            unsigned int edx;     // high double word
	        };
	        unsigned long long value; // quad word
	    };
	}; // msrdrv.h:27:1: warning: packed attribute is unnecessary for ‘MsrInOut’ [-Wpacked]



Cicle: -------------------------------------------------------------------------
NOTE: file *f seems not used in the loop
NOTE: IOCTL_MSR_CMDS seems useless
	static long msrdrv_ioctl(struct file *f, unsigned int ioctl_num, unsigned long ioctl_param)
	{
	    struct MsrInOut *msrops;
	    int i;
	    if (ioctl_num != IOCTL_MSR_CMDS) {
	            return 0;
	    }
	    msrops = (struct MsrInOut*)ioctl_param;
	    for (i = 0 ; i <= MSR_VEC_LIMIT ; i++, msrops++) {
	        switch (msrops->op) {
	        case MSR_NOP:
	            dprintk(KERN_ALERT "Module " DEV_NAME ": seen MSR_NOP command\n")
	            break;
	        case MSR_STOP:
	            dprintk(KERN_ALERT "Module " DEV_NAME ": seen MSR_STOP command\n")
	            goto label_end;
	        case MSR_READ:
	            dprintk(KERN_ALERT "Module " DEV_NAME ": seen MSR_READ command\n")
	            msrops->value = read_msr(msrops->ecx);
	            break;
	        case MSR_WRITE:
	            dprintk(KERN_ALERT "Module " DEV_NAME ": seen MSR_WRITE command\n")
	            write_msr(msrops->ecx, msrops->eax, msrops->edx);
	            break;
	        case MSR_RDTSC:
	            dprintk(KERN_ALERT "Module " DEV_NAME ": seen MSR_RDTSC command\n")
	            msrops->value = read_tsc();
	            break;
	        default:
	            dprintk(KERN_ALERT "Module " DEV_NAME ": Unknown option 0x%x\n", msrops->op)
	            return 1;
	        }
	    }
	    label_end:

	    return 0;
	}



Example of function params: ----------------------------------------------------
	struct MsrInOut msr_start[] = {
        { MSR_WRITE, 0x38f, 0x00, 0x00 },       // ia32_perf_global_ctrl: disable 4 PMCs & 3 FFCs
        { MSR_WRITE, 0xc1, 0x00, 0x00 },        // ia32_pmc0: zero value (35-5)
        { MSR_WRITE, 0xc2, 0x00, 0x00 },        // ia32_pmc1: zero value (35-5)
        { MSR_WRITE, 0xc3, 0x00, 0x00 },        // ia32_pmc2: zero value (35-5)
        { MSR_WRITE, 0xc4, 0x00, 0x00 },        // ia32_pmc3: zero value (35-5)
        { MSR_WRITE, 0x309, 0x00, 0x00 },       // ia32_fixed_ctr0: zero value (35-17)
        { MSR_WRITE, 0x30a, 0x00, 0x00 },       // ia32_fixed_ctr1: zero value (35-17)
        { MSR_WRITE, 0x30b, 0x00, 0x00 },       // ia32_fixed_ctr2: zero value (35-17)
        { MSR_WRITE, 0x186, 0x004101c2, 0x00 }, // ia32_perfevtsel1, UOPS_RETIRED.ALL (19-28)
        { MSR_WRITE, 0x187, 0x0041010e, 0x00 }, // ia32_perfevtsel0, UOPS_ISSUED.ANY (19.22)
        { MSR_WRITE, 0x188, 0x01c1010e, 0x00 }, // ia32_perfevtsel2, UOPS_ISSUED.ANY-stalls (19-22)
        { MSR_WRITE, 0x189, 0x004101a2, 0x00 }, // ia32_perfevtsel3, RESOURCE_STALLS.ANY (19-27)
        { MSR_WRITE, 0x38d, 0x222, 0x00 },      // ia32_perf_fixed_ctr_ctrl: ensure 3 FFCs enabled
        { MSR_WRITE, 0x38f, 0x0f, 0x07 },       // ia32_perf_global_ctrl: enable 4 PMCs & 3 FFCs
        { MSR_STOP, 0x00, 0x00 }
    };

    struct MsrInOut msr_stop[] = {
        { MSR_WRITE, 0x38f, 0x00, 0x00 },       // ia32_perf_global_ctrl: disable 4 PMCs & 3 FFCs
        { MSR_WRITE, 0x38d, 0x00, 0x00 },       // ia32_perf_fixed_ctr_ctrl: clean up FFC ctrls
        { MSR_READ, 0xc1, 0x00 },               // ia32_pmc0: read value (35-5)
        { MSR_READ, 0xc2, 0x00 },               // ia32_pmc1: read value (35-5)
        { MSR_READ, 0xc3, 0x00 },               // ia32_pmc2: read value (35-5)
        { MSR_READ, 0xc4, 0x00 },               // ia32_pmc3: read value (35-5)
        { MSR_READ, 0x309, 0x00 },              // ia32_fixed_ctr0: read value (35-17)
        { MSR_READ, 0x30a, 0x00 },              // ia32_fixed_ctr1: read value (35-17)
        { MSR_READ, 0x30b, 0x00 },              // ia32_fixed_ctr2: read value (35-17)
        { MSR_STOP, 0x00, 0x00 }
    };



Example of function calls: -----------------------------------------------------
    ioctl(fd, IOCTL_MSR_CMDS, (long long)msr_start);
    ...[do something]...
    ioctl(fd, IOCTL_MSR_CMDS, (long long)msr_stop);

In the Xen Scheduler:
	ioctl(fd, IOCTL_MSR_CMDS, (long long)msr_stop);
	...[store data]...
	ioctl(fd, IOCTL_MSR_CMDS, (long long)msr_start);
	...[do schedule]...


